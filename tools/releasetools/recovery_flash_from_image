#!/usr/bin/env python
#
# Copyright (C) 2008 The Android Open Source Project
# Copyright (C) 2013 SlimRoms
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from sys import argv
from os import getcwd, environ, remove, path, listdir, makedirs, walk
from re import search, sub
from shutil import rmtree, copy2, copytree
from subprocess import call
from zipfile import ZipFile
from hashlib import md5

# declare all the variables needed
fstab = open(argv[1], 'r').read()
out = argv[2]
device = argv[3]
zipname = argv[4]
source = getcwd() # PWD

try:
    bootline = search('(\S|\t| )+/recovery\s.*\n*', fstab).group(0)
    boot_partition = search('(/\S+){2,}', bootline).group(0)
    bpt = search('\s((?!/)\S)+\s', bootline).group(0)
    boot_partition_type = sub(r'(\s)+', "", bpt)
except:
    raise ValueError("malformed recovery.fstab")

recovery_version = "SlimRecovery-%s" % device
updater = "%s/obj/EXECUTABLES/updater_intermediates/updater" % out
signer = "%s/framework/signapk.jar" % environ['ANDROID_HOST_OUT']

# rm -r $OUT/*kernel*
for f in listdir(out):
    if "SlimRecovery-" in f:
        file = "%s/%s" % (out, f)
        if path.isfile(file):
            remove(file)
        else:
            rmtree(file)

if not path.exists(updater):
    with open("dump", "w") as dump:
        silencer = call('make updater'.split(), stdout = dump)
    remove("dump")
if not path.exists(signer):
    with open("dump", "w") as dump:
        silencer = call('make signapk'.split(), stdout = dump)
    remove("dump")

zip_dir = "%s/%s" % (out, recovery_version)
if path.exists(zip_dir):
    rmtree(zip_dir)
makedirs(zip_dir)

if zipname:
    zip_out_dir = "%s/%s" % (out, zipname)
else:
    zipname = recovery_version
    zip_out_dir = zip_dir

# updater-script
updater_dir = "%s/META-INF/com/google/android" % zip_dir
if not path.exists(updater_dir):
    makedirs(updater_dir)
copy2(updater, "%s/update-binary" % updater_dir)

updater_script = "%s/updater-script" % updater_dir

# create the contents
contents = "ui_print(\"Installing SlimRecovery...\");\n"
if boot_partition_type == "mtd":
    contents += "package_extract_file(\"recovery.img\", \"/tmp/recovery.img\");\n"
    contents += "write_raw_image(\"/tmp/recovery.img\", \"%s\");\n" % boot_partition
elif boot_partition_type == "emmc":
    contents += "package_extract_file(\"recovery.img\", \"%s\");\n" % boot_partition
elif boot_partition_type == "bml":
    contents += "assert(package_extract_file(\"recovery.img\", \"/tmp/recovery.img\")\n"
    contents += "\twrite_raw_image(\"/tmp/recovery.img\", \"%s\")\n" % boot_partition
    contents += "\tdelete(\"/tmp/recovery.img\"));\n"
contents += "ui_print(\" \");\n"
contents += "ui_print(\"Done!\");"
with open(updater_script, "w") as f:
    f.write(contents)

# copy the recovery
copy2("%s/recovery.img" % out, "%s/recovery.img" % zip_dir)

# zip package
with ZipFile("%s.zip" % zip_dir, "w") as zipper:
    rootlen = len(zip_dir) + 1
    for root, dirs, files in walk(zip_dir):
        for file in files:
            fn = path.join(root, file)
            zipper.write(fn, fn[rootlen:])

# sign it
testkey_x = "%s/build/target/product/security/testkey.x509.pem" % source
testkey_p = "%s/build/target/product/security/testkey.pk8" % source
call(['java', '-jar', signer, testkey_x, testkey_p, "%s.zip" % zip_dir, "%s.zip" % zip_out_dir])
remove("%s.zip" % zip_dir)
rmtree(zip_dir)

# create md5 file
md5file = "%s/%s.zip.md5" % (out, zipname)
md5content = md5(open("%s.zip" % zip_out_dir, "rb").read()).hexdigest() + "  %s.zip" % zipname
with open(md5file, "w") as f:
    f.write(md5content)

# print
print md5content
print "recovery saved to %s.zip" % zip_out_dir
